"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AMQPClient = void 0;
const amqp_base_client_js_1 = require("./amqp-base-client.js");
const amqp_error_js_1 = require("./amqp-error.js");
const amqp_view_js_1 = require("./amqp-view.js");
const buffer_1 = require("buffer");
const net = __importStar(require("net"));
const tls = __importStar(require("tls"));
class AMQPClient extends amqp_base_client_js_1.AMQPBaseClient {
    constructor(url) {
        const u = new URL(url);
        const vhost = decodeURIComponent(u.pathname.slice(1)) || "/";
        const username = u.username || "guest";
        const password = u.password || "guest";
        const name = u.searchParams.get("name") || "";
        const frameMax = parseInt(u.searchParams.get("frameMax") || "4096");
        const heartbeat = parseInt(u.searchParams.get("heartbeat") || "0");
        const platform = `${process.release.name} ${process.version} ${process.platform} ${process.arch}`;
        super(vhost, username, password, name, platform, frameMax, heartbeat);
        this.tls = u.protocol === "amqps:";
        this.host = u.hostname || "localhost";
        this.port = parseInt(u.port) || (this.tls ? 5671 : 5672);
        this.insecure = u.searchParams.get("insecure") !== undefined;
        this.framePos = 0;
        this.frameSize = 0;
        this.frameBuffer = buffer_1.Buffer.allocUnsafe(frameMax);
    }
    connect() {
        const socket = this.connectSocket();
        Object.defineProperty(this, 'socket', {
            value: socket,
            enumerable: false
        });
        return new Promise((resolve, reject) => {
            socket.on('error', (err) => reject(new amqp_error_js_1.AMQPError(err.message, this)));
            this.connectPromise = [resolve, reject];
        });
    }
    connectSocket() {
        const options = {
            host: this.host,
            port: this.port,
            servername: this.host,
            rejectUnauthorized: !this.insecure
        };
        const sendStart = () => this.send(new Uint8Array([65, 77, 81, 80, 0, 0, 9, 1]));
        const conn = this.tls ? tls.connect(options, sendStart) : net.connect(options, sendStart);
        conn.on('data', this.onRead.bind(this));
        return conn;
    }
    onRead(buf) {
        const bufLen = buf.length;
        let bufPos = 0;
        while (bufPos < bufLen) {
            if (this.frameSize === 0) {
                if (this.framePos !== 0) {
                    const copied = buf.copy(this.frameBuffer, this.framePos, bufPos, bufPos + 7 - this.framePos);
                    if (copied === 0)
                        throw `Copied 0 bytes framePos=${this.framePos} bufPos=${bufPos} bytesWritten=${bufLen}`;
                    this.frameSize = this.frameBuffer.readInt32BE(bufPos + 3) + 8;
                    this.framePos += copied;
                    bufPos += copied;
                    continue;
                }
                if (bufPos + 3 + 4 > bufLen) {
                    const copied = buf.copy(this.frameBuffer, this.framePos, bufPos, bufLen);
                    if (copied === 0)
                        throw `Copied 0 bytes framePos=${this.framePos} bufPos=${bufPos} bytesWritten=${bufLen}`;
                    this.framePos += copied;
                    break;
                }
                this.frameSize = buf.readInt32BE(bufPos + 3) + 8;
                if (bufLen - bufPos >= this.frameSize) {
                    const view = new amqp_view_js_1.AMQPView(buf.buffer, buf.byteOffset + bufPos, this.frameSize);
                    this.parseFrames(view);
                    bufPos += this.frameSize;
                    this.frameSize = 0;
                    continue;
                }
            }
            const leftOfFrame = this.frameSize - this.framePos;
            const copyBytes = Math.min(leftOfFrame, bufLen - bufPos);
            const copied = buf.copy(this.frameBuffer, this.framePos, bufPos, bufPos + copyBytes);
            if (copied === 0)
                throw `Copied 0 bytes, please report this bug, frameSize=${this.frameSize} framePos=${this.framePos} bufPos=${bufPos} copyBytes=${copyBytes} bytesWritten=${bufLen}`;
            this.framePos += copied;
            bufPos += copied;
            if (this.framePos === this.frameSize) {
                const view = new amqp_view_js_1.AMQPView(this.frameBuffer.buffer, 0, this.frameSize);
                this.parseFrames(view);
                this.frameSize = this.framePos = 0;
            }
        }
        return true;
    }
    send(bytes) {
        return new Promise((resolve, reject) => {
            if (this.socket)
                this.socket.write(bytes, undefined, (err) => err ? reject(err) : resolve());
            else
                reject(new amqp_error_js_1.AMQPError("Socket not connected", this));
        });
    }
    closeSocket() {
        if (this.socket)
            this.socket.end();
    }
}
exports.AMQPClient = AMQPClient;
//# sourceMappingURL=amqp-socket-client.js.map